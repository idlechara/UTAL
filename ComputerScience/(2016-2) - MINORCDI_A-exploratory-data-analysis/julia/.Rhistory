install.packages(c("mlbench", "caret"))
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/HCF.R')
setwd("/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia")
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/HCF.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/HCF.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/HCF.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/HCF.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/HCF.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
control <- trainControl(method="repeatedcv", classProbs = TRUE, number=10, repeats=3, allowParallel = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
?make.names
make.names(scaled.data, unique = TRUE)
make.names(names(scaled.data), unique = TRUE)
View(scaled.data)
names(scaled.data) <- make.names(names(scaled.data), unique = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
make.names(names(scaled.data), unique = TRUE)
make.names(names(scaled.data))
make.names(names(scaled.data), allow_ = T)
model <- train(Species~., data=scaled.data, method="lvq", preProcess="scale", trControl=control)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(Species~., data=scaled.data, method="lvq", preProcess="scale", trControl=control)
control <- trainControl(method="repeatedcv", classProbs = TRUE,number=10, repeats=3, allowParallel = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
levels(scaled.data$Species) <- make.names(levels(factor(scaled.data$Species)))
control <- trainControl(method="repeatedcv", classProbs = TRUE,number=10, repeats=3, allowParallel = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
control <- trainControl(method="repeatedcv", classProbs = TRUE,number=10, repeats=3, allowParallel = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
control <- trainControl(method="repeatedcv",number=10, repeats=3, allowParallel = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/FR.R')
scaled.data <- cbind(data[,5], J)
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"Species"
scaled.data$Species <- as.factor(scaled.data$Species)
levels(scaled.data$Species) <- make.names(levels(factor(scaled.data$Species)))
control <- trainControl(method="repeatedcv", classProbs = TRUE,number=10, repeats=3, allowParallel = TRUE)
model <- train(Species~., data=scaled.data, method="lvq", trControl=control)
View(scaled.data)
View(scaled.data)
data(PimaIndiansDiabetes)
PimaIndiansDiabetes
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"species"
scaled.data$Species <- as.factor(scaled.data$Species)
control <- trainControl(method="repeatedcv", classProbs = TRUE,number=10, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
control <- trainControl(method="repeatedcv",number=10, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
control <- trainControl(method="repeatedcv",number=2152, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
# ensure results are repeatable
set.seed(7)
# load the library
library(mlbench)
library(caret)
# load the dataset
data(PimaIndiansDiabetes)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
install.packages("e1071")
model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
data = read.table("data.csv", sep=",", header=TRUE)
# log transform
J <- scale(data[,10])
scaled.INST2 <- scale(data[,11:2161])
scaled.data <- cbind(data[,5], J)
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"species"
scaled.data$Species <- as.factor(scaled.data$Species)
levels(scaled.data$Species) <- make.names(levels(factor(scaled.data$Species)))
control <- trainControl(method="repeatedcv",number=2152, repeats=3, allowParallel = TRUE)
names(scaled.data)[1]<-"species"
#analyse 1
scaled.data <- cbind(data[,5], J)
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"species"
scaled.data$Species <- as.factor(scaled.data$Species)
scaled.data$Species <- as.factor(scaled.data$Species)
scaled.data$species <- as.factor(scaled.data$species)
levels(scaled.data$Species) <- make.names(levels(factor(scaled.data$Species)))
control <- trainControl(method="repeatedcv",number=2152, repeats=3, allowParallel = TRUE)
levels(scaled.data$species) <- make.names(levels(factor(scaled.data$species)))
names(scaled.data)[1]<-"species"
scaled.data$species <- as.factor(scaled.data$species)
levels(scaled.data$species) <- make.names(levels(factor(scaled.data$species)))
control <- trainControl(method="repeatedcv",number=2152, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
set.seed(7)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
control <- trainControl(method="repeatedcv",number=10, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(scaled.data, data[,5], sizes=c(1:8), rfeControl=control)
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
View(scaled.data)
scaled.data <- cbind(J, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
View(scaled.data)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(scaled.data, data[,5], sizes=c(1:8), rfeControl=control)
results <- rfe(scaled.data, data[,5], sizes=c(1:2152), rfeControl=control)
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/PCA.R')
source('/Volumes/Nitori/Documents/Sources/2016/Utalca/ExploratoryDataAnalysis/julia/RF.R')
#random forest, works well.
library(randomForest)
options(max.print=1000)
#PCA
data = read.table("data.csv", sep=",", header=TRUE)
# log transform
J <- scale(data[,10])
scaled.INST2 <- scale(data[,11:2161])
#analyse 1
scaled.data <- cbind(data[,5], J)
scaled.data[]
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"Species"
scaled.data$Species <- as.factor(scaled.data$Species)
varNames <- names(scaled.data)
varNames <- varNames[!varNames %in% c("Species")]
varNames1 <- paste(varNames, collapse = "+")
rf.form <- as.formula(paste("Species", varNames1, sep = " ~ "))
cross.sell.rf <- randomForest(rf.form,scaled.data,ntree=500,importance=T)
plot(cross.sell.rf)
varImpPlot(cross.sell.rf,sort = T,main="Variable Importance",n.var=10)
plot(cross.sell.rf)
View(data)
#Highly correlated factors, delivers all the classes with high correlation.
library(mlbench)
library(caret)
options(max.print=1000)
#PCA
data = read.table("data.csv", sep=",", header=TRUE)
# log transform
J <- scale(data[,10])
scaled.INST2 <- scale(data[,11:2161])
#analyse 1
scaled.data <- cbind(J, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"First"
correlationMatrix <- cor(scaled.data)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=.5)
print(highlyCorrelated)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=.7)
print(highlyCorrelated)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=1)
print(highlyCorrelated)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=.95)
print(highlyCorrelated)
data = read.table("data.csv", sep=",", header=TRUE)
View(data)
library(mlbench)
library(caret)
set.seed(7)
options(max.print=1000)
#PCA
data = read.table("data.csv", sep=",", header=TRUE)
J <- scale(data[,10])
# log transform
scaled.INST2 <- scale(data[,11:2161])
#analyse 1
scaled.data <- cbind(data[,5], J)
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"species"
scaled.data$species <- as.factor(scaled.data$species)
levels(scaled.data$species) <- make.names(levels(factor(scaled.data$species)))
control <- trainControl(method="repeatedcv",number=10, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
#analyse 2
scaled.data <- cbind(data[,7], J)
scaled.data[]
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"Species"
control <- trainControl(method="repeatedcv", number=10, repeats=3)
importance <- varImp(model, scale=FALSE)
model <- train(Species~., data=scaled.data, method="lvq", preProcess="scale", trControl=control)
print(importance)
plot(importance)
#analyse 3
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"species"
scaled.data$species <- as.factor(scaled.data$species)
levels(scaled.data$species) <- make.names(levels(factor(scaled.data$species)))
control <- trainControl(method="repeatedcv",number=10, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
#analyse 2
scaled.data <- cbind(data[,7], J)
scaled.data[]
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"Species"
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(Species~., data=scaled.data, method="lvq", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
#analyse 3
scaled.data <- cbind(data[,9], J)
options(max.print=1000)
#PCA
data = read.table("data.csv", sep=",", header=TRUE)
# log transform
J <- scale(data[,10])
scaled.INST2 <- scale(data[,11:2161])
#analyse 1
scaled.data <- cbind(data[,5], J)
scaled.data <- cbind(scaled.data, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"species"
scaled.data$species <- as.factor(scaled.data$species)
levels(scaled.data$species) <- make.names(levels(factor(scaled.data$species)))
control <- trainControl(method="repeatedcv",number=10, repeats=3, allowParallel = TRUE)
model <- train(species~., data=scaled.data, method="lvq", trControl=control)
importance <- varImp(model, scale=FALSE)
#correlation matrix, an alternative to som
library(corrplot)
options(max.print=1000)
#PCA
data = read.table("data.csv", sep=",", header=TRUE)
# log transform
J <- scale(data[,10])
scaled.INST2 <- scale(data[,11:2161])
#analyse 1
scaled.data <- cbind(J, scaled.INST2)
scaled.data <- as.data.frame(scaled.data);
names(scaled.data)[1]<-"First"
corrplot(cor(scaled.data), order = "hclust", tl.col='black', tl.cex=.75)
