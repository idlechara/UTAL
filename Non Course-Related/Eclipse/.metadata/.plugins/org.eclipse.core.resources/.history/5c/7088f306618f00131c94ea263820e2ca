/*
 * DebugServer.cpp
 *
 *  Created on: Feb 6, 2014
 *      Author: jvarred
 */
#include <pthread.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include "DebugServer.h"
#include <semaphore.h>



void *main_loop(void *arg){
    DebugServer *serv = (DebugServer *) arg;
    do{
        serv->send_data();
    }while (1);
    return NULL;
}


DebugServer::DebugServer() {
    // TODO Auto-generated constructor stub

}


void DebugServer::send_data(){

    int ret;

    sem_wait(&this->data_sender_wait); //espera hasta que isw marque >0, osea, hay nuevo dato

    sem_wait(&this->buffer_sender_lock); //espera a que se desbloquee el buffer.

    //sends the data
    ret = write(this->client_descriptor, &this->buf, sizeof(lsm303_t));
    if(ret == -1) {
        perror("write");
        puts("Debug sender error. Can't send buffer");
    }
    sem_post(&this->buffer_sender_lock); // Desbloquea el buffer
}

void DebugServer::try_to_feed_data(void *data){
    if(sem_trywait(&this->buffer_sender_lock) != -1) {
        memcpy(&this->buf, data, sizeof(lsm303_t));
        sem_post(&this->buffer_sender_lock);
        sem_post(&this->data_sender_wait);
    }
}

void DebugServer::wait_for_client(){

    struct sockaddr_in sin;
    socklen_t slen = sizeof(sin);

    puts("Waiting a debug client");
    this->client_descriptor = accept(this->server_descriptor, (struct sockaddr *)&sin, &slen);
}

void DebugServer::server_init(const char *addr, unsigned short port)
{
    struct sockaddr_in sin;
    int fd, set = 1;

    printf("Starting server %s:%hu: ", addr, port);
    fflush(stdout);
    fd = socket(PF_INET, SOCK_STREAM, 0);

    sin.sin_family = AF_INET;
    sin.sin_port = htons(port);
    sin.sin_addr.s_addr = inet_addr(addr);

    if(setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &set, sizeof(set)) == -1) {
        perror("setsockopt");
        exit(-1);
    }

    if(bind(fd, (struct sockaddr *)&sin, sizeof(struct sockaddr_in)) == -1) {
        close(fd);
        perror("bind");
        exit(-1);
    }
    puts("OK");
    //listen(fd, 1);
    this->server_descriptor = fd;
}

void DebugServer::server_start(){

    this->wait_for_client();

    sem_init(&this->data_sender_wait, 0, 0);
    sem_init(&this->buffer_sender_lock, 0, 1);

    pthread_t tid;
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    pthread_create(&tid, &attr, main_loop, (void *)this);

}
DebugServer::~DebugServer() {
    // TODO Auto-generated destructor stub
}
