import java.io.IOException;


/**
 *
 * @author natsuko
 */
public class MainWindow extends javax.swing.JFrame {

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zoomValue = new javax.swing.JSlider();
        visualizerWindow = new RenderizableCanvas();
        label1 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        viewInput = new javax.swing.JComboBox();
        label3 = new javax.swing.JLabel();
        selectColor = new javax.swing.JButton();
        beginColoring = new javax.swing.JButton();
        depth = new javax.swing.JSlider();
        label4 = new javax.swing.JLabel();
        scrollText = new javax.swing.JScrollPane();
        outputConsole = new javax.swing.JTextArea();
        label5 = new javax.swing.JLabel();
        windowMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setName("mainWindow"); // NOI18N
        setResizable(false);

        zoomValue.setMajorTickSpacing(1);
        zoomValue.setMaximum(5);
        zoomValue.setMinimum(1);
        zoomValue.setSnapToTicks(true);
        zoomValue.setEnabled(false);
        zoomValue.setName("zoomValue"); // NOI18N
        zoomValue.setValue(1);
        zoomValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomValueStateChanged(evt);
            }
        });

        visualizerWindow.setEnabled(false);
        visualizerWindow.setName("visualizerWindow"); // NOI18N

        label1.setName("label1"); // NOI18N

        label2.setName("label2"); // NOI18N

        viewInput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vista Eje Z", "Vista Eje Y", "Vista Eje X"}));
        viewInput.setEnabled(false);
        viewInput.setName("viewInput"); 
        viewInput.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewInputItemStateChanged(evt);
            }
        });

        label3.setName("label3"); // NOI18N

        selectColor.setEnabled(false);
        selectColor.setName("selectColor"); // NOI18N
        selectColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectColorActionPerformed(evt);
            }
        });

        beginColoring.setEnabled(false);
        beginColoring.setName("beginColoring"); // NOI18N
        beginColoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginColoringActionPerformed(evt);
            }
        });

        depth.setEnabled(false);
        depth.setName("depth"); // NOI18N
        depth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                depthStateChanged(evt);
            }
        });

        label4.setName("label4"); // NOI18N

        scrollText.setName("scrollText"); // NOI18N

        outputConsole.setColumns(20);
        outputConsole.setEditable(false);
        outputConsole.setLineWrap(true);
        outputConsole.setRows(5);
        outputConsole.setName("outputConsole"); // NOI18N
        scrollText.setViewportView(outputConsole);

        label5.setName("label5"); // NOI18N

        windowMenu.setName("windowMenu"); // NOI18N

        fileMenu.setName("fileMenu"); // NOI18N
        
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jMenuItem1ActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        windowMenu.add(fileMenu);

        setJMenuBar(windowMenu);
        
        jMenuItem1.setText("Leer Archivos...");
        jMenuItem2.setText("Cerrar");
        this.setTitle("MRI Visual System Testing GUI");
        fileMenu.setText("Archivo...");
        label1.setText("Nivel de Aumento:");
        label2.setText("Tipo de Vista:");
        label3.setText("Colorear zonas:");
        selectColor.setText("Elegir color origen");
        beginColoring.setText("Elegir color destino");
        label4.setText("Profundidad:");
        label5.setText("Salida");
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(visualizerWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label5)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(beginColoring)
                                .addComponent(selectColor))
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label1)
                            .addGap(175, 175, 175))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(zoomValue, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(viewInput, 0, 251, Short.MAX_VALUE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label4)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(scrollText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                                .addComponent(depth, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                            .addContainerGap()))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                             .addComponent(label2)
                            .addComponent(viewInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectColor)
                            .addComponent(label3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beginColoring)
                        .addGap(16, 16, 16)
                        .addComponent(label4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(label5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollText, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                    .addComponent(visualizerWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zoomValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomValueStateChanged
    	//TODO escribir algotirmo de zoom
    	//this.renderizable.slice(this.depth.getValue(), this.viewInput.getSelectedIndex(), null);
    	//this.renderizable.tamaño(this.zoomValue.getValue());
    	//this.visualizerWindow.setImage(this.renderizable.imagenRenderizable);
    	
    }//GEN-LAST:event_zoomValueStateChanged

    private void viewInputItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewInputItemStateChanged
        // TODO add your handling code here:
    	this.renderizable.slice(this.depth.getValue(), this.viewInput.getSelectedIndex(), null);
    	this.visualizerWindow.setImage(this.renderizable.imagenRenderizable);
    	switch (this.viewInput.getSelectedIndex()) {
		case 2:
	    	this.depth.setMaximum(this.renderizable.colores.length);
			break;
		case 1:
	    	this.depth.setMaximum(this.renderizable.colores[0].length);
			break;
		case 0:
	    	this.depth.setMaximum(this.renderizable.colores[0][0].length);
			break;

		default:
			break;
		}
    	this.depth.setValue(1);
    }//GEN-LAST:event_viewInputItemStateChanged

    private void selectColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectColorActionPerformed

    private void beginColoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginColoringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_beginColoringActionPerformed

    private void depthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_depthStateChanged
    	this.renderizable.slice(this.depth.getValue(), this.viewInput.getSelectedIndex(), null);
    	this.visualizerWindow.setImage(this.renderizable.imagenRenderizable);
    }//GEN-LAST:event_depthStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Abrir archivos:
    	FileSelectorDialog dialog = new FileSelectorDialog(this,false, this);
    	dialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton beginColoring;
    javax.swing.JSlider depth;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JTextArea outputConsole;
    private javax.swing.JScrollPane scrollText;
    javax.swing.JButton selectColor;
    javax.swing.JComboBox viewInput;
     RenderizableCanvas visualizerWindow;
     javax.swing.JMenuBar windowMenu;
     javax.swing.JSlider zoomValue;
    Imagen2D[] imagenes = null;
     Imagen3D renderizable = null;
    // End of variables declaration//GEN-END:variables

}
